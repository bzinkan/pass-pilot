# PassPilot Replit Quick‑Fix Playbook

**Use this to fix “works in preview, breaks after deploy,” stuck domain verification, and super‑admin data not showing.** Copy/paste the snippets directly.

---

## 0) Replit Deployment Sanity Checklist (Do these in order)

1. **Deployment env vars** (not just Workspace Secrets):

   * Open **Deploy → Settings → Environment variables** and add these (values are examples):

   ```
   DATABASE_URL=postgres://...
   STRIPE_SECRET_KEY=sk_live_or_test_...
   STRIPE_WEBHOOK_SECRET=whsec_...
   SUPERADMIN_TOKEN=some-strong-random
   APP_URL=https://passpilot.net
   VITE_SUPERADMIN_TOKEN=some-strong-random
   STRIPE_PRICE_TRIAL=price_...
   STRIPE_PRICE_BASIC=price_...
   STRIPE_PRICE_SMALL=price_...
   STRIPE_PRICE_MEDIUM=price_...
   STRIPE_PRICE_LARGE=price_...
   STRIPE_PRICE_UNLIMITED=price_...
   ```
2. **Start command** serves API + SPA:

   * `run` should build then start the server (not Vite dev server). Example:

   ```json
   // package.json
   {
     "scripts": {
       "build": "vite build",
       "start": "node server.js",
       "build-and-start": "npm run build && npm run start"
     }
   }
   ```
3. **SPA fallback** (if using Express): ensure `connect-history-api-fallback` **before** `express.static`.
4. **Vite base** set to `/` in `vite.config.ts`.
5. **Service worker**: disable once if blank screen, then add safe update flow (see §3.c).

---

## 1) Minimal Health Endpoints (backend)

Add these so you can verify deploy quickly.

```ts
// server/health.ts (or inside server.js)
app.get('/api/health', (_req, res) => res.send('ok'));
app.get('/api/health/db', async (_req, res) => {
  try { await db.$queryRaw`SELECT 1`; res.send('ok'); }
  catch (e) { console.error(e); res.status(500).send('db-fail'); }
});
```

---

## 2) Super‑Admin API (read + simple auth)

```ts
// server/admin.ts
app.use('/api/admin', (req, res, next) => {
  const token = req.headers['x-admin-token'];
  if (token !== process.env.SUPERADMIN_TOKEN) return res.status(401).send('unauthorized');
  next();
});

app.get('/api/admin/schools', async (_req, res) => {
  const rows = await db.school.findMany({ orderBy: { createdAt: 'desc' } });
  res.json(rows);
});

app.get('/api/admin/payments', async (_req, res) => {
  const rows = await db.payment.findMany({ orderBy: { createdAt: 'desc' }, take: 200 });
  res.json(rows);
});
```

**Frontend fetch example:**

```ts
await fetch('/api/admin/schools', {
  headers: { 'x-admin-token': import.meta.env.VITE_SUPERADMIN_TOKEN }
});
```

---

## 3) Frontend Stabilizers

**a) Submit current form values (no stale state):**

```tsx
function onSubmit(e: React.FormEvent<HTMLFormElement>) {
  e.preventDefault();
  const data = Object.fromEntries(new FormData(e.currentTarget).entries());
  fetch('/api/register', {
    method: 'POST', headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data), cache: 'no-store'
  });
}
```

**b) Crash catcher (temporary):**

```html
<!-- index.html (TEMP for one deploy) -->
<script>
window.addEventListener('error', e => {
  document.body.innerHTML = '<pre style="padding:16px;font:14px/1.5 monospace">JS Error: '+e.message+'\n'+(e.filename||'')+':'+(e.lineno||'')+'</pre>';
});
window.addEventListener('unhandledrejection', e => {
  document.body.innerHTML = '<pre style="padding:16px;font:14px/1.5 monospace">Promise Rejection: '+(e.reason?.message||e.reason)+'</pre>';
});
</script>
```

**c) Safe service worker update flow:**

```ts
// sw-register.ts
export function registerSW() {
  if (!('serviceWorker' in navigator)) return;
  window.addEventListener('load', async () => {
    const reg = await navigator.serviceWorker.register('/sw.js', { scope: '/' });
    reg.addEventListener('updatefound', () => {
      const nw = reg.installing; if (!nw) return;
      nw.addEventListener('statechange', () => {
        if (nw.state === 'installed' && navigator.serviceWorker.controller) {
          nw.postMessage({ type: 'SKIP_WAITING' });
        }
      });
    });
    let refreshed = false;
    navigator.serviceWorker.addEventListener('controllerchange', () => {
      if (!refreshed) { refreshed = true; location.reload(); }
    });
  });
}
```

```js
// sw.js
self.addEventListener('message', e => { if (e.data?.type === 'SKIP_WAITING') self.skipWaiting(); });
self.addEventListener('activate', e => { e.waitUntil(self.clients.claim()); });
```

---

## 4) Stripe Webhook (subscription activation)

```ts
// server/webhook.ts
import bodyParser from 'body-parser';
app.post('/api/stripe/webhook', bodyParser.raw({ type: 'application/json' }), async (req, res) => {
  const sig = req.headers['stripe-signature'];
  let event; try {
    event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);
  } catch (e) { console.error('bad sig', e); return res.status(400).send('bad sig'); }

  if (event.type === 'checkout.session.completed') {
    const s = event.data.object; // Checkout.Session
    const { schoolId, plan } = s.metadata || {};
    await db.school.update({ where: { id: schoolId }, data: { status: 'ACTIVE', plan, stripeSubId: s.subscription || undefined } });
    await db.payment.create({ data: { schoolId, amountCents: s.amount_total || 0, currency: s.currency || 'usd', stripePiId: s.payment_intent || null, stripeSessId: s.id, plan, status: 'succeeded' } });
  }
  if (event.type === 'customer.subscription.deleted') {
    const sub = event.data.object;
    await db.school.updateMany({ where: { stripeSubId: sub.id }, data: { status: 'CANCELED' } });
  }
  res.json({ received: true });
});
```

**Test quickly (Stripe CLI):**

```
stripe login
stripe listen --forward-to localhost:3000/api/stripe/webhook
```

Set `STRIPE_WEBHOOK_SECRET` from CLI output.

---

## 5) Vite + Express Prod Wiring

**vite.config.ts** (important `base: '/'`):

```ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
export default defineConfig({
  base: '/',
  root: path.resolve(import.meta.dirname, 'client'),
  build: { outDir: path.resolve(import.meta.dirname, 'dist/public'), emptyOutDir: true },
  plugins: [react()]
});
```

**server.js** (history fallback before static):

```js
import express from 'express';
import path from 'path';
import history from 'connect-history-api-fallback';
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url); const __dirname = path.dirname(__filename);
const app = express();
const DIST = path.join(__dirname, 'dist', 'public');
app.use(history({ rewrites: [
  { from: /^\/assets\/.*$/, to: ctx => ctx.parsedUrl.pathname },
  { from: /^\/.*\.(js|css|png|jpg|svg|ico|txt|json)$/, to: ctx => ctx.parsedUrl.pathname },
]}));
app.use(express.static(DIST, { index: 'index.html', maxAge: '1h' }));
app.get('/healthz', (_, res) => res.send('ok'));
app.listen(process.env.PORT || 3000, '0.0.0.0');
```

---

## 6) Cloudflare + Replit Domain Verify (fast path)

1. In Cloudflare **DNS** (temporarily DNS‑only / gray):

   * `A  @  34.111.179.208`  (from Replit)
   * `TXT  @  replit-verify=...` (exact full string)
   * *(optional later)* `CNAME  www  pass-pilot-desales.replit.app`
2. In Replit → **Domains** → add `passpilot.net` and click **Check status**.
3. When verified, set as **Primary**.
4. Turn Cloudflare orange proxy back **ON** for `A @` and `CNAME www`.
5. (Optional) **Redirect** root to `www`:

   * Page Rule / Redirect Rule: `passpilot.net/*` → `https://www.passpilot.net/$1` (301)

---

## 7) Quick Logs You Should See

* On register submit: `REGISTER payload: { ... }` then `REGISTER saved id=...`
* On webhook: `checkout.session.completed` then School status → **ACTIVE**
* On super‑admin load: `GET /api/admin/schools` returns rows

---

## 8) Common “Why it’s blank / not saving” Traps

* Reading React state immediately after `setState` → **use FormData** on submit.
* Service worker cached an empty shell → unregister once; add safe updater.
* Replit Deploy **env vars missing** (they’re separate from Workspace).
* Writing to filesystem in prod → use DB only.
* CORS or base URL mismatch → call the deployed origin, not localhost.

---

**Need me to tailor this for your exact repo?** Paste your `server.js`, `vite.config.ts`, and the registration submit handler and I’ll drop in exact replacements here.
