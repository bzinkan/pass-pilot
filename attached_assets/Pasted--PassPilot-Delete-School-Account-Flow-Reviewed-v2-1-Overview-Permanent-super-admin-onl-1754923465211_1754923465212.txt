# PassPilot Delete School/Account Flow (Reviewed v2)

## 1) Overview

Permanent, super-admin-only delete that removes one school **and all of its related data**. Designed to be **tenant-safe** (only the targeted school is affected), **Stripe-aware** (tries to cancel sub, non-blocking), and **future-proof** (transaction-wrapped).

---

## 2) Database: ON DELETE CASCADE

Every table with a `school_id` must reference `schools.id` using `onDelete: 'cascade'`.

**Drizzle examples:**

```ts
// db/schema/users.ts
export const users = pgTable('users', {
  id: uuid('id').defaultRandom().primaryKey(),
  schoolId: uuid('school_id')
    .notNull()
    .references(() => schools.id, { onDelete: 'cascade' }),
  email: text('email').notNull(),
});

// db/schema/passes.ts
export const passes = pgTable('passes', {
  id: uuid('id').defaultRandom().primaryKey(),
  schoolId: uuid('school_id')
    .notNull()
    .references(() => schools.id, { onDelete: 'cascade' }),
  issuedAt: timestamp('issued_at').defaultNow().notNull(),
});

// db/schema/payments.ts
export const payments = pgTable('payments', {
  id: uuid('id').defaultRandom().primaryKey(),
  schoolId: uuid('school_id')
    .notNull()
    .references(() => schools.id, { onDelete: 'cascade' }),
  amountCents: integer('amount_cents').notNull(),
});

// db/schema/subscriptionEvents.ts
export const subscriptionEvents = pgTable('subscription_events', {
  id: uuid('id').defaultRandom().primaryKey(),
  schoolId: uuid('school_id')
    .notNull()
    .references(() => schools.id, { onDelete: 'cascade' }),
  // ...
});
```

**If tables already exist, add CASCADE via migration:**

```sql
ALTER TABLE users DROP CONSTRAINT IF EXISTS users_school_id_fkey,
  ADD CONSTRAINT users_school_id_fkey
  FOREIGN KEY (school_id) REFERENCES schools(id) ON DELETE CASCADE;

ALTER TABLE passes DROP CONSTRAINT IF EXISTS passes_school_id_fkey,
  ADD CONSTRAINT passes_school_id_fkey
  FOREIGN KEY (school_id) REFERENCES schools(id) ON DELETE CASCADE;

ALTER TABLE payments DROP CONSTRAINT IF EXISTS payments_school_id_fkey,
  ADD CONSTRAINT payments_school_id_fkey
  FOREIGN KEY (school_id) REFERENCES schools(id) ON DELETE CASCADE;

ALTER TABLE subscription_events DROP CONSTRAINT IF EXISTS subscription_events_school_id_fkey,
  ADD CONSTRAINT subscription_events_school_id_fkey
  FOREIGN KEY (school_id) REFERENCES schools(id) ON DELETE CASCADE;
```

---

## 3) Server: Admin router with hard delete (final)

```ts
// server/admin.ts
import express from 'express';
import Stripe from 'stripe';
import { db } from '../db';
import { eq } from 'drizzle-orm';
import { schools } from '../db/schema/schools';

const admin = express.Router();

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string, {
  apiVersion: '2024-06-20',
});

// Super-admin header gate
admin.use((req, res, next) => {
  const token = req.headers['x-admin-token'];
  if (!token || token !== process.env.SUPERADMIN_TOKEN) {
    return res.status(401).send('unauthorized');
  }
  next();
});

// (Optional) list schools
admin.get('/schools', async (_req, res) => {
  const rows = await db.select().from(schools).orderBy(schools.createdAt);
  res.json(rows);
});

// Hard delete ONE school (children are removed via ON DELETE CASCADE)
admin.delete('/schools/:id', async (req, res) => {
  const id = req.params.id;
  try {
    // Lookup first (for stripeSubId + early 404)
    const [target] = await db.select().from(schools).where(eq(schools.id, id)).limit(1);
    if (!target) return res.status(404).json({ error: 'not_found' });

    // Try to cancel Stripe subscription (non-blocking)
    if (target.stripeSubId) {
      try { await stripe.subscriptions.cancel(target.stripeSubId); }
      catch (e) { console.error('[admin.delete] stripe cancel failed', e); }
    }

    // Transaction: delete parent (cascades to children)
    await db.transaction(async (tx) => {
      await tx.delete(schools).where(eq(schools.id, id));
    });

    return res.json({ ok: true, id });
  } catch (e) {
    console.error('[admin.delete] unexpected error', e);
    return res.status(500).json({ error: 'delete_failed' });
  }
});

export default admin;
```

**Mount once in your main server:**

```ts
// server.js or server/index.ts
import adminRouter from './server/admin';
app.use('/api/admin', adminRouter);
```

---

## 4) Frontend: Row action (confirm + optimistic remove)

```tsx
import { useState } from 'react';

export function AdminRow({ school, onDeleted }: { school: any; onDeleted: (id: string) => void }) {
  const [busy, setBusy] = useState(false);

  async function handleDelete() {
    const conf = prompt(`Type the school name to permanently delete:\n\n${school.name}`);
    if (conf !== school.name) return;

    setBusy(true);
    try {
      const res = await fetch(`/api/admin/schools/${school.id}`, {
        method: 'DELETE',
        headers: { 'x-admin-token': import.meta.env.VITE_SUPERADMIN_TOKEN },
      });
      if (!res.ok) {
        const body = await res.text().catch(() => '');
        alert(`Delete failed: ${res.status} ${body}`);
      } else {
        onDeleted(school.id);
      }
    } finally {
      setBusy(false);
    }
  }

  return (
    <tr>
      {/* other cells */}
      <td>
        <button title="Delete" onClick={handleDelete} disabled={busy} style={{ marginLeft: 8 }}>üóëÔ∏è</button>
      </td>
    </tr>
  );
}
```

Parent usage:

```tsx
const [rows, setRows] = useState(schoolsFromApi);
<AdminRow key={s.id} school={s} onDeleted={(id) => setRows(prev => prev.filter(x => x.id !== id))} />
```

---

## 5) Safety & Compliance

* Route is **super-admin only** (token header).
* Double confirmation in UI (typed name).
* Consider **soft-delete** if you must retain accounting records: mark `status='DELETED'`, `deletedAt=now()`, clear PII on users, keep payments.
* Back up DB before enabling in production.
* Data validation: add checks like `CHECK (teachers >= 0)` to avoid invalid values (e.g., `-1`).

---

## 6) Final Checklist

* [ ] All child tables have `ON DELETE CASCADE`.
* [ ] `SUPERADMIN_TOKEN` and `VITE_SUPERADMIN_TOKEN` are set in **Deploy env vars**.
* [ ] Stripe key present; deletion still works if cancel fails.
* [ ] Admin router mounted at `/api/admin` once.
* [ ] UI tested: delete removes row, refresh shows it gone.

This version matches the reviewed code you approved and is ready to copy/paste for Replit.
