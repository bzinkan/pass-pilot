Please run these pre-deploy validations to ensure:
(1) Sessions are tied to a chosen school (school-scoped), not just the email.
(2) The school uniqueness guard blocks duplicate schools.

Preconditions
-------------
- Dev server available at PREDEPLOY_BASE_URL="http://localhost:3000"
- Dev test route /__test__/createSchool is mounted (disabled in prod)
- Updated /api/login (multi-school two-step) is deployed in workspace
- DATABASE_URL, SESSION_SECRET, etc. are set

A) One-command consolidated checks
----------------------------------
PREDEPLOY_BASE_URL="http://localhost:3000" node scripts/preDeploy.js

EXPECT:
- "schools.slug exists + unique index" → PASS
- "Duplicate school guard live check"  → First 201, then 409
- "Login supports multi-school flow (static)" → PASS
- "Checkout success redirects to /app" → PASS (if route exposed in dev)

B) Schema assertions (DB truly school-scoped)
---------------------------------------------
# 1) The users table must be unique by (school_id, email), NOT globally by email:
psql "$DATABASE_URL" -c "
  SELECT indexname, indexdef
  FROM pg_indexes
  WHERE tablename='users';
"

# EXPECT: an index like users_school_email_uq on (school_id, email)
# If any index is UNIQUE on (email) alone, report it as a BUG.

# 2) Verify pp_session is expected to carry school context (we'll check behavior below).

C) Code sanity (quick static checks)
-----------------------------------
# Ensure 'schoolId' is present in session logic and queries are school-scoped:
grep -R "pp_session" -n
grep -R "requireAuth" -n
grep -R "schoolId" server routes src -n

# For key resources (e.g., passes/students/teachers), confirm filters include schoolId:
grep -R "passes\\.schoolId" -n || true
grep -R "students\\.schoolId" -n || true
grep -R "teachers\\.schoolId" -n || true
# If your table names differ, adjust. We’re checking that protected queries constrain by req.session.schoolId.

D) Functional proof: same email in two schools
----------------------------------------------
# 1) Create two schools
S1=$(curl -s -X POST http://localhost:3000/__test__/createSchool -H "Content-Type: application/json" -d '{"name":"Sunnydale QA"}' | jq -r .id)
S2=$(curl -s -X POST http://localhost:3000/__test__/createSchool -H "Content-Type: application/json" -d '{"name":"Rosenberg QA"}' | jq -r .id)
echo "S1=$S1 S2=$S2"

# 2) Create same email in both schools with same password
export TEST_EMAIL="bobby.qa@example.org"
export TEST_PASSWORD="Passw0rd!"

HASH=$(node -e "console.log(require('bcryptjs').hashSync(process.env.TEST_PASSWORD, 10))")

# Adjust column names if needed (expect: users(id, school_id, email, password_hash))
psql "$DATABASE_URL" <<SQL
INSERT INTO users (id, school_id, email, password_hash) VALUES (gen_random_uuid(), '$S1', '$TEST_EMAIL', '$HASH');
INSERT INTO users (id, school_id, email, password_hash) VALUES (gen_random_uuid(), '$S2', '$TEST_EMAIL', '$HASH');
SQL

# 3) Initial login (no schoolId) → should prompt for school selection
curl -s -X POST http://localhost:3000/api/login \
  -H "Content-Type: application/json" \
  -c /tmp/pp_cookies.txt \
  -d "{\"email\":\"$TEST_EMAIL\",\"password\":\"$TEST_PASSWORD\"}" | tee /tmp/login1.json

# EXPECT JSON: { "success": false, "requiresSchool": true, "schools":[{id,name}...] }
jq . /tmp/login1.json

# 4) Complete login choosing school S1
curl -s -X POST http://localhost:3000/api/login \
  -H "Content-Type: application/json" \
  -b /tmp/pp_cookies.txt -c /tmp/pp_cookies.txt \
  -d "{\"email\":\"$TEST_EMAIL\",\"password\":\"$TEST_PASSWORD\",\"schoolId\":\"$S1\"}" | tee /tmp/login_s1.json

# EXPECT JSON: { "success": true }

# 5) Session reflects chosen school (200 OK)
curl -s -o /dev/null -w "%{http_code}\n" \
  -X GET http://localhost:3000/api/me \
  -b /tmp/pp_cookies.txt

# EXPECT: 200 (and if /api/me returns JSON, it should include schoolId = S1)

# 6) Log out (if endpoint exists) or clear cookies, then login with S2
rm -f /tmp/pp_cookies.txt

curl -s -X POST http://localhost:3000/api/login \
  -H "Content-Type: application/json" \
  -c /tmp/pp_cookies.txt \
  -d "{\"email\":\"$TEST_EMAIL\",\"password\":\"$TEST_PASSWORD\"}" > /tmp/login2.json

curl -s -X POST http://localhost:3000/api/login \
  -H "Content-Type: application/json" \
  -b /tmp/pp_cookies.txt -c /tmp/pp_cookies.txt \
  -d "{\"email\":\"$TEST_EMAIL\",\"password\":\"$TEST_PASSWORD\",\"schoolId\":\"$S2\"}" > /tmp/login_s2.json

curl -s -o /dev/null -w "%{http_code}\n" \
  -X GET http://localhost:3000/api/me \
  -b /tmp/pp_cookies.txt

# EXPECT: 200, representing S2 now. This proves same email+password can log into two different schools via explicit selection.

# 7) Wrong password must NOT return school list (guard against email-oracle)
curl -s -o /dev/null -w "%{http_code}\n" -X POST http://localhost:3000/api/login \
  -H "Content-Type: application/json" \
  -d "{\"email\":\"$TEST_EMAIL\",\"password\":\"WRONG\"}"

# EXPECT: 401 (no 'schools' array in response)

E) School uniqueness guard (already in preDeploy)
-------------------------------------------------
# Re-attempt same school name:
curl -s -o /dev/null -w "%{http_code}\n" \
  -X POST http://localhost:3000/__test__/createSchool \
  -H "Content-Type: application/json" \
  -d '{"name":"Sunnydale QA"}'

# EXPECT: 409 (duplicate blocked)

F) Report back
--------------
Please paste back:
- preDeploy.js output
- The two IDs S1/S2
- JSON from /tmp/login1.json and /tmp/login_s1.json
- The HTTP status codes from /api/me checks for S1 and S2 flows
- The HTTP 401 from the WRONG password test
- Confirmation that users UNIQUE index is (school_id, email) and there is no UNIQUE(email) index
