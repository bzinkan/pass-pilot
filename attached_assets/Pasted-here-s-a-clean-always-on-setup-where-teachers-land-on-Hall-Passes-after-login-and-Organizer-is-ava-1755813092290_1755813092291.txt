hereâ€™s a clean, always-on setup where teachers land on Hall Passes after login, and Organizer is available in the top nav for one-tap switching. No feature flags needed, and Organizer stays fully isolated so itâ€™s easy to maintain/remove later.

Backend (Express) â€“ mount Organizer routes

/server/organizer/routes.ts (your CRUD from earlier lives here)

export function registerOrganizerRoutes(app) {
  // r.use(requireAuth) â€” whatever you already use
  app.get("/api/organizer/categories", listCategories);
  app.post("/api/organizer/categories", createCategory);
  app.delete("/api/organizer/categories/:id", deleteCategory);

  app.get("/api/organizer/entries", listEntries);
  app.post("/api/organizer/entries", createEntry);
  app.put("/api/organizer/entries/:id", updateEntry);
  app.delete("/api/organizer/entries/:id", deleteEntry);

  app.get("/api/organizer/export", exportCsv);

  app.get("/api/organizer/events", listEvents);
  app.post("/api/organizer/events", createEvent);
  app.delete("/api/organizer/events/:id", deleteEvent);
}


/server/index.ts

import express from "express";
const app = express();

// â€¦ your existing mounts (auth, passes, etc.)

import { registerOrganizerRoutes } from "./organizer/routes";
registerOrganizerRoutes(app); // always on

export default app;


Your existing hall-pass endpoints remain unchanged.

Frontend (React + React Router) â€“ default to Passes, Organizer in top nav

/web/App.tsx

import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import Layout from "./Layout";
import PassesPage from "./passes/PassesPage";
import OrganizerPage from "./organizer/OrganizerPage";

export default function App() {
  return (
    <BrowserRouter>
      <Routes>
        {/* Login route renders your login page (not shown here) */}
        <Route path="/login" element={<YourLoginPage />} />

        {/* Authenticated layout */}
        <Route path="/" element={<Layout />}>
          {/* Default: go to Hall Passes after login */}
          <Route index element={<Navigate to="/passes" replace />} />

          {/* Main sections */}
          <Route path="passes" element={<PassesPage />} />
          <Route path="organizer" element={<OrganizerPage />} />
        </Route>

        {/* Fallback */}
        <Route path="*" element={<Navigate to="/passes" replace />} />
      </Routes>
    </BrowserRouter>
  );
}


/web/Layout.tsx (top navigation with two tabs)

import { NavLink, Outlet } from "react-router-dom";

export default function Layout() {
  return (
    <div className="min-h-screen flex flex-col">
      {/* Top nav */}
      <header className="w-full border-b bg-white">
        <div className="max-w-6xl mx-auto px-4 h-14 flex items-center gap-4">
          <div className="font-semibold">PassPilot</div>
          <nav className="ml-6 flex items-center gap-3">
            <Tab to="/passes" label="ðŸšª Passes" />
            <Tab to="/organizer" label="ðŸ“‚ Organizer" />
          </nav>
          <div className="ml-auto">{/* user menu / logout */}</div>
        </div>
      </header>

      {/* Content */}
      <main className="flex-1 max-w-6xl mx-auto w-full px-4 py-4">
        <Outlet />
      </main>
    </div>
  );
}

function Tab({ to, label }: { to: string; label: string }) {
  return (
    <NavLink
      to={to}
      className={({ isActive }) =>
        `px-3 py-1.5 rounded-md text-sm ${
          isActive ? "bg-black text-white" : "hover:bg-gray-100"
        }`
      }
      end
    >
      {label}
    </NavLink>
  );
}


/web/passes/PassesPage.tsx (placeholderâ€”your existing page lives here)

export default function PassesPage() {
  return (
    <div>
      <h1 className="text-lg font-semibold mb-3">Hall Passes</h1>
      {/* your existing passes UI */}
    </div>
  );
}


/web/organizer/OrganizerPage.tsx (two-pane: folders + content)

import { useState, useEffect } from "react";
import { CategoryList } from "./CategoryList";
import { EntryForm } from "./EntryForm";
import { EntryList } from "./EntryList";
import { CalendarView } from "./CalendarView";
import * as api from "./api";

export default function OrganizerPage() {
  const [view, setView] = useState<"entries" | "calendar">("entries");
  const [categories, setCategories] = useState<any[]>([]);
  const [activeCategoryId, setActiveCategoryId] = useState<number | null>(null);

  useEffect(() => { api.getCategories().then(setCategories); }, []);

  return (
    <div className="flex border rounded-lg overflow-hidden">
      <aside className="w-64 border-r bg-gray-50 p-3">
        <div className="flex gap-2 mb-3">
          <button
            onClick={() => setView("entries")}
            className={`text-sm px-2 py-1 rounded ${view==="entries" ? "bg-black text-white" : "bg-white border"}`}
          >
            ðŸ—‚ Folders
          </button>
          <button
            onClick={() => setView("calendar")}
            className={`text-sm px-2 py-1 rounded ${view==="calendar" ? "bg-black text-white" : "bg-white border"}`}
          >
            ðŸ“… Calendar
          </button>
        </div>
        {view === "entries" && (
          <CategoryList
            categories={categories}
            onRefresh={() => api.getCategories().then(setCategories)}
            onSelect={setActiveCategoryId}
          />
        )}
      </aside>

      <main className="flex-1 p-4">
        {view === "entries" ? (
          <div className="grid md:grid-cols-2 gap-4">
            <EntryForm activeCategoryId={activeCategoryId} />
            <EntryList activeCategoryId={activeCategoryId} />
          </div>
        ) : (
          <CalendarView />
        )}
      </main>
    </div>
  );
}


Your CategoryList, EntryForm, EntryList, and CalendarView can be the minimal versions we discussed (discipline logbook, permission slip checklist, parent contacts, and simple calendar).

Auth note (important)

Keep your existing auth flow. After login, route to /passes (as shown).

If you gate routes with an AuthGuard, just wrap <Layout /> with it; Organizer/Pases both inherit.

Why this fits your request

Default landing is Hall Passes (/passes).

Organizer is always accessible in the top nav.

Organizer code is fully isolatedâ€”no changes to your existing hall pass pages.

Easy to remove later: delete /web/organizer, unmount the routes, and remove the single nav link.